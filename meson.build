project('libcxx', 'cpp')

abi_srcdir = 'libcxxabi' / 'src'
abi_incdir = 'libcxxabi' / 'include'
lib_srcdir = 'libcxx' / 'src'
lib_incdir = 'libcxx' / 'include'

install_headers([
    abi_incdir / 'cxxabi.h',
    abi_incdir / '__cxxabi_config.h',
  ],
  subdir: 'c++',
)
install_headers([
    lib_incdir / '__bit_reference',
    lib_incdir / '__bsd_locale_defaults.h',
    lib_incdir / '__bsd_locale_fallbacks.h',
    lib_incdir / '__config',
    lib_incdir / '__debug',
    lib_incdir / '__errc',
    lib_incdir / '__functional_03',
    lib_incdir / '__functional_base',
    lib_incdir / '__functional_base_03',
    lib_incdir / '__hash_table',
    lib_incdir / '__libcpp_version',
    lib_incdir / '__locale',
    lib_incdir / '__mutex_base',
    lib_incdir / '__node_handle',
    lib_incdir / '__nullptr',
    lib_incdir / '__split_buffer',
    lib_incdir / '__sso_allocator',
    lib_incdir / '__std_stream',
    lib_incdir / '__string',
    lib_incdir / '__threading_support',
    lib_incdir / '__tree',
    lib_incdir / '__tuple',
    lib_incdir / '__undef_macros',
    lib_incdir / 'algorithm',
    lib_incdir / 'any',
    lib_incdir / 'array',
    lib_incdir / 'atomic',
    lib_incdir / 'bit',
    lib_incdir / 'bitset',
    lib_incdir / 'cassert',
    lib_incdir / 'ccomplex',
    lib_incdir / 'cctype',
    lib_incdir / 'cerrno',
    lib_incdir / 'cfenv',
    lib_incdir / 'cfloat',
    lib_incdir / 'charconv',
    lib_incdir / 'chrono',
    lib_incdir / 'cinttypes',
    lib_incdir / 'ciso646',
    lib_incdir / 'climits',
    lib_incdir / 'clocale',
    lib_incdir / 'cmath',
    lib_incdir / 'codecvt',
    lib_incdir / 'compare',
    lib_incdir / 'complex',
    lib_incdir / 'complex.h',
    lib_incdir / 'condition_variable',
    lib_incdir / 'csetjmp',
    lib_incdir / 'csignal',
    lib_incdir / 'cstdarg',
    lib_incdir / 'cstdbool',
    lib_incdir / 'cstddef',
    lib_incdir / 'cstdint',
    lib_incdir / 'cstdio',
    lib_incdir / 'cstdlib',
    lib_incdir / 'cstring',
    lib_incdir / 'ctgmath',
    lib_incdir / 'ctime',
    lib_incdir / 'ctype.h',
    lib_incdir / 'cwchar',
    lib_incdir / 'cwctype',
    lib_incdir / 'deque',
    lib_incdir / 'errno.h',
    lib_incdir / 'exception',
    lib_incdir / 'execution',
    lib_incdir / 'fenv.h',
    lib_incdir / 'filesystem',
    lib_incdir / 'float.h',
    lib_incdir / 'forward_list',
    lib_incdir / 'fstream',
    lib_incdir / 'functional',
    lib_incdir / 'future',
    lib_incdir / 'initializer_list',
    lib_incdir / 'inttypes.h',
    lib_incdir / 'iomanip',
    lib_incdir / 'ios',
    lib_incdir / 'iosfwd',
    lib_incdir / 'iostream',
    lib_incdir / 'istream',
    lib_incdir / 'iterator',
    lib_incdir / 'limits',
    lib_incdir / 'limits.h',
    lib_incdir / 'list',
    lib_incdir / 'locale',
    lib_incdir / 'locale.h',
    lib_incdir / 'map',
    lib_incdir / 'math.h',
    lib_incdir / 'memory',
    lib_incdir / 'mutex',
    lib_incdir / 'new',
    lib_incdir / 'numeric',
    lib_incdir / 'optional',
    lib_incdir / 'ostream',
    lib_incdir / 'queue',
    lib_incdir / 'random',
    lib_incdir / 'ratio',
    lib_incdir / 'regex',
    lib_incdir / 'scoped_allocator',
    lib_incdir / 'set',
    lib_incdir / 'setjmp.h',
    lib_incdir / 'shared_mutex',
    lib_incdir / 'span',
    lib_incdir / 'sstream',
    lib_incdir / 'stack',
    lib_incdir / 'stdbool.h',
    lib_incdir / 'stddef.h',
    lib_incdir / 'stdexcept',
    lib_incdir / 'stdint.h',
    lib_incdir / 'stdio.h',
    lib_incdir / 'stdlib.h',
    lib_incdir / 'streambuf',
    lib_incdir / 'string',
    lib_incdir / 'string.h',
    lib_incdir / 'string_view',
    lib_incdir / 'strstream',
    lib_incdir / 'system_error',
    lib_incdir / 'tgmath.h',
    lib_incdir / 'thread',
    lib_incdir / 'tuple',
    lib_incdir / 'type_traits',
    lib_incdir / 'typeindex',
    lib_incdir / 'typeinfo',
    lib_incdir / 'unordered_map',
    lib_incdir / 'unordered_set',
    lib_incdir / 'utility',
    lib_incdir / 'valarray',
    lib_incdir / 'variant',
    lib_incdir / 'vector',
    lib_incdir / 'version',
    lib_incdir / 'wchar.h',
    lib_incdir / 'wctype.h',
  ],
  subdir: 'c++',
)
install_headers([
    lib_incdir / 'experimental' / '__config',
    lib_incdir / 'experimental' / '__memory',
    lib_incdir / 'experimental' / 'algorithm',
    lib_incdir / 'experimental' / 'coroutine',
    lib_incdir / 'experimental' / 'deque',
    lib_incdir / 'experimental' / 'filesystem',
    lib_incdir / 'experimental' / 'forward_list',
    lib_incdir / 'experimental' / 'functional',
    lib_incdir / 'experimental' / 'iterator',
    lib_incdir / 'experimental' / 'list',
    lib_incdir / 'experimental' / 'map',
    lib_incdir / 'experimental' / 'memory_resource',
    lib_incdir / 'experimental' / 'propagate_const',
    lib_incdir / 'experimental' / 'regex',
    lib_incdir / 'experimental' / 'set',
    lib_incdir / 'experimental' / 'simd',
    lib_incdir / 'experimental' / 'string',
    lib_incdir / 'experimental' / 'type_traits',
    lib_incdir / 'experimental' / 'unordered_map',
    lib_incdir / 'experimental' / 'unordered_set',
    lib_incdir / 'experimental' / 'utility',
    lib_incdir / 'experimental' / 'vector',
  ],
  subdir: 'c++' / 'experimental',
)
install_headers([
    lib_incdir / 'ext' / '__hash',
    lib_incdir / 'ext' / 'hash_map',
    lib_incdir / 'ext' / 'hash_set',
  ],
  subdir: 'c++' / 'ext',
)

cdata = configuration_data()
cdata.set('_LIBCPP_ABI_NAMESPACE', '__1')
cdata.set('_LIBCPP_ABI_VERSION', 1)
abi_defines = [
  '#define _LIBCPP_HAS_NO_ALIGNED_ALLOCATION',
  '#define _LIBCPP_ENABLE_NODISCARD',
]
if get_option('default_library') == 'static'
  cdata.set('_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS', true)
  abi_defines += '#define _LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS'
endif
cdata.set('_LIBCPP_ABI_DEFINES', '\n'.join(abi_defines))

configure_file(
  input: lib_incdir / '__config_site.in',
  output: '__config_site',
  configuration: cdata,
  format: 'cmake@',
  install: true,
  install_dir: get_option('includedir') / 'c++',
)

abi_sources = [
  abi_srcdir / 'abort_message.cpp',
  abi_srcdir / 'cxa_aux_runtime.cpp',
  abi_srcdir / 'cxa_default_handlers.cpp',
  abi_srcdir / 'cxa_demangle.cpp',
  abi_srcdir / 'cxa_exception.cpp',
  abi_srcdir / 'cxa_exception_storage.cpp',
  abi_srcdir / 'cxa_guard.cpp',
  abi_srcdir / 'cxa_handlers.cpp',
  abi_srcdir / 'cxa_personality.cpp',
  abi_srcdir / 'cxa_unexpected.cpp',
  abi_srcdir / 'cxa_vector.cpp',
  abi_srcdir / 'cxa_virtual.cpp',
  abi_srcdir / 'fallback_malloc.cpp',
  abi_srcdir / 'private_typeinfo.cpp',
  abi_srcdir / 'stdlib_exception.cpp',
  abi_srcdir / 'stdlib_stdexcept.cpp',
  abi_srcdir / 'stdlib_typeinfo.cpp',
]
if host_machine.system() not in ['windows', 'darwin']
  abi_sources += abi_srcdir / 'cxa_thread_atexit.cpp'
endif

lib_sources = [
  lib_srcdir / 'algorithm.cpp',
  lib_srcdir / 'any.cpp',
  lib_srcdir / 'bind.cpp',
  lib_srcdir / 'charconv.cpp',
  lib_srcdir / 'chrono.cpp',
  lib_srcdir / 'condition_variable.cpp',
  lib_srcdir / 'condition_variable_destructor.cpp',
  lib_srcdir / 'debug.cpp',
  lib_srcdir / 'exception.cpp',
  lib_srcdir / 'functional.cpp',
  lib_srcdir / 'future.cpp',
  lib_srcdir / 'hash.cpp',
  lib_srcdir / 'ios.cpp',
  lib_srcdir / 'iostream.cpp',
  lib_srcdir / 'locale.cpp',
  lib_srcdir / 'memory.cpp',
  lib_srcdir / 'mutex.cpp',
  lib_srcdir / 'mutex_destructor.cpp',
  lib_srcdir / 'new.cpp',
  lib_srcdir / 'optional.cpp',
  lib_srcdir / 'random.cpp',
  lib_srcdir / 'regex.cpp',
  lib_srcdir / 'shared_mutex.cpp',
  lib_srcdir / 'stdexcept.cpp',
  lib_srcdir / 'string.cpp',
  lib_srcdir / 'strstream.cpp',
  lib_srcdir / 'system_error.cpp',
  lib_srcdir / 'thread.cpp',
  lib_srcdir / 'typeinfo.cpp',
  lib_srcdir / 'utility.cpp',
  lib_srcdir / 'valarray.cpp',
  lib_srcdir / 'variant.cpp',
  lib_srcdir / 'vector.cpp',
]

incdirs = include_directories(
  'libcxx' / 'src',
  lib_incdir,
  'libcxxabi' / 'include',
)

cpp_options = [
  'cpp_std=c++17',
]

cpp_args = [
  '-nostdinc++',
  '-fno-aligned-allocation',
  '-D_LIBCPP_BUILDING_LIBRARY',
]

libdir = get_option('libdir') / 'c++'

libcxxabi = library('c++abi', abi_sources,
  override_options: cpp_options,
  cpp_args: cpp_args + [
    '-DLIBCXXABI_SILENT_TERMINATE',
    '-D_LIBCPP_ENABLE_CXX17_REMOVED_UNEXPECTED_FUNCTIONS',
  ],
  include_directories: incdirs,
  install: true,
  install_dir: libdir,
)

libcxx = library('c++', lib_sources,
  override_options: cpp_options,
  cpp_args: cpp_args + [
    '-DLIBCXX_BUILDING_LIBCXXABI',
  ],
  include_directories: incdirs,
  link_with: libcxxabi,
  install: true,
  install_dir: libdir,
)
